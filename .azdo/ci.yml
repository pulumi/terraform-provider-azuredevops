# This template will generate a list of jobs that will run. The
# jobs created will correspond to the cross product of the
# vmImages and goVersions specified by the parameters.

parameters:
  goVersions: [ ]
  vmImages: [ ]
  maxParallel: 1

jobs:

  - job: build
    displayName: 'Build: '

    # Build on each combination of supported OS and Go version
    strategy:
      maxParallel: ${{ parameters.maxParallel }}
      matrix:
        ${{ each goVersion in parameters.goVersions }}:
          ${{ each vmImage in parameters.vmImages }}:
            OS_${{ vmImage.ymlSafeName }}_GO_${{ goVersion.ymlSafeName }}:
              vmImage: ${{ vmImage.value }}
              goVersion: ${{ goVersion.value }}

    pool:
      vmImage: $(vmImage)

    steps:
      - task: GoTool@0
        displayName: 'Install correct version of Go'
        inputs:
          version: $(goVersion)
          GOPATH: '$(Pipeline.Workspace)/gopath'
          GOBIN: '$(GOPATH)/bin'

      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make tools
        displayName: 'Install Dependencies'

      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make check-vendor-vs-mod
        displayName: 'Verify Vendored Dependencies'

      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make fmtcheck
        displayName: 'Run Format Check'

      - bash: |
          #!/usr/bin/env bash
          cd "$BUILD_SOURCESDIRECTORY"
          make lint
        displayName: 'Run Lint Check'

      - bash: |
          if [ -x "$(command -v docker)" ]; then
            docker build -f .devcontainer/Dockerfile -t dev --build-arg GO_VERSION=${GO_VERSION} .
          fi
        env:
          GO_VERSION: $(goVersion)
        displayName: 'Run Devcontainer Build'
